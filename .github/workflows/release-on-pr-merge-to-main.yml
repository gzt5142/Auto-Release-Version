name: Build a release and increment SemVer upon pr/merge to main branch

# Note, the version string is not tracked in a file within the repo.  The version
# is assumed to be associated with git tags formated like SemVer versions. 
#
# The eregex I am using for a 'valid' SemVer is: [Vv]?(\d+)\.(\d+)\.(\d+)
#   - optional leading v (or V)
#   - Number(s)
#   - a dot
#   - Number(s)
#   - a dot
#   - Number(s)  
#
# This is a simplified version of the regex offered at https://semver.org/
# Also note that I am allowing the optional leading [vV] to scan for tags,
# while semver.org says no. This is mostly to do with making it easy to store 
# the SemVer as a tag (which would be nice to include the leading 'v').

# The routine to increment SemVer will assess which part of the version to 
# increment based on labels associated with the PR.  These labels have 
# specific names: 
#   - 'SemVer:Major++' == Bump the Major part of the SemVer
#   - 'SemVer:Minor++' == Bump the Minor part of the SemVer
# If neither of those labels are found on the PR, then the patch number 
# is incremented. 
 
on:
  pull_request:
    types:
      - closed
    branches: [ "main" ]

env:
    ZIPNAME: HyTEST_EnvSetUp.tar.gz
    ## See the 'makezip' step below

jobs:
  release-on-pr-merge-to-main:

    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      
      - name: Fetch the last SemVer-formatted tag
        id: lastver
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            function refFilter(cmp) {
              return /\/[Vv]?(\d+)\.(\d+)\.(\d+)$/.test(cmp.ref)
            }
            function semVerCmp(a, b) {
              const A = a.split('.'); const B = b.split('.')
              return (A[0]*10000 + A[1]*100 + A[2]) - ( B[0]*10000 + B[1]*100 + B[2])
            }
            let taggedVer = await github.paginate(github.rest.git.listMatchingRefs, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/v'
            }).then( reflist => {
              const taglist = reflist.filter(refFilter).map(function(r) {return r.ref.slice(r.ref.search(/\d/))}).sort(semVerCmp)
              if (taglist.length == 0) { return "0.0.0" }
              return taglist.pop()
            });
            return taggedVer

      - name: Increment SemVer based on labels in the PullRequest
        id: nextver
        uses: actions/github-script@v6
        env:
          VER: ${{ steps.lastver.outputs.result }}
        with:
          result-encoding: string
          script: |
            function semVer_PlusPlus(v, Mmp) {
              const V = v.split('.');
                switch (Mmp.toUpperCase()){
                    case "MAJOR": return `${Number(V[0])+1}.0.0` ;
                    case "MINOR": return `${V[0]}.${Number(V[1])+1}.0` ;
                    default: return `${V[0]}.${V[1]}.${Number(V[2])+1}` ;
                }
            }
            const labelList = context.payload.pull_request.labels.map(l => {return l.name})
            if (labelList.includes('SemVer:Major++')){
              return semVer_PlusPlus(process.env.VER, 'major')
            }
            if (labelList.includes('SemVer:Minor++')){
              return semVer_PlusPlus(process.env.VER, 'minor')
            }
            return semVer_PlusPlus(process.env.VER, 'patch')

      - name: Create a release tagged with incremented SemVer
        uses: actions/create-release@v1
        id:   createrelease
        env: 
          GITHUB_TOKEN: ${{ github.token }}
        with: 
          draft: false
          prerelease: false
          release_name: "v${{ steps.nextver.outputs.result }}"
          tag_name: "v${{ steps.nextver.outputs.result }}"

      - name: tar/Zip a sanitized version of this repo
        id:   makezip
        # This step is a simple sanitizing and archiving of the repo dir.  
        # If you would like to do something more complex, it would be good to 
        # do those more complicated actions via Makefile or similar. Whatever
        # the mechanism, you'll also need to adjust the 'uploadzip' step below
        # to reflect the path and filename of the artifact/asset to bind to 
        # this release.
        run: |
          echo ${{ steps.nextver.outputs.result }} > VERSION
          cd ../
          dname=`basename ${GITHUB_REPOSITORY}`
          echo "Creating ZIP archive:  ${ZIPNAME}"
          sed -e '/^#/d' -e 's!^!./${dname}/!' -e 's/\s*$//' < ${dname}/environment_setup/manifest.txt > /tmp/manifest.txt
          tar --files-from /tmp/manifest.txt -cvf - | gzip > /tmp/${ZIPNAME}


      - name: Upload ZIP package and bind to release.
        id:   uploadzip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.createrelease.outputs.upload_url }}
          asset_path: "/tmp/${{ env.ZIPNAME }}"
          asset_name: ${{ env.ZIPNAME }}
          asset_content_type: application/zip
